<!DOCTYPE html>
<html data-theme="BDG">
  <head>
    <title>Buddhism Dhamma Guide</title>
    <link rel="stylesheet" href="/stylesheets/pdfStyle.css" />
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <link rel="stylesheet" href="/stylesheets/aos.css" />
    <link rel="stylesheet" href="/stylesheets/swiper-bundle.min.css" />
    <script src="/javascripts/swiper-bundle.min.js"></script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body>
    <% include ./partial/navbar.ejs %>

    <div class="aos-all h-screen">
      <div
        class="card w-full p-6 bg-base-100 border border-base-300 shadow-xl mt-2"
      >
        <div class="text-xl font-semibold items-center">
          <%= abhidhamma.title %>(·Äû·ÄØ·Äê·Äì·Äô·Äπ·Äô·Äí·ÄÆ·Äï·Äú·Ä≠·ÄØ·Äô·Ä¨ Level- <%= abhidhamma.category
          == "level1"? "1" : abhidhamma.category == "level2"? "2" :
          abhidhamma.category == "level3"? "3":"1,2,3" %>)
        </div>

        <div class="divider mt-2"></div>
        <div class="card bg-base-100 shadow-sm">
          <div class="card-body">
            <div class="text-lg col-span-full">
              <%= abhidhamma.description %>
            </div>
            <div class="app-container container mx-auto mt-1 lg:mt-5">
              <!-- Top Toolbar -->
              <div
                class="top-toolbar grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7"
              >
                <div class="toolbar-group">
                  <!-- <button class="btn" onclick="printPdf()">üñ®Ô∏è Print</button> -->
                  <button class="btnPdf" onclick="downloadPdf()">
                    üíæ Save
                  </button>
                </div>

                <div class="toolbar-separator"></div>

                <div class="toolbar-group">
                  <button class="icon-btn" onclick="zoomOut()" title="Zoom Out">
                    ‚àí
                  </button>
                  <select
                    class="zoom-select"
                    id="zoomSelect"
                    onchange="setZoom()"
                  >
                    <option value="0.5">50%</option>
                    <option value="0.75">75%</option>
                    <option value="1" selected>100%</option>
                    <option value="1.25">125%</option>
                    <option value="1.5">150%</option>
                    <option value="2">200%</option>
                    <option value="fit-width">Fit Width</option>
                    <option value="fit-page">Fit Page</option>
                  </select>
                  <button class="icon-btn" onclick="zoomIn()" title="Zoom In">
                    +
                  </button>
                </div>

                <div class="toolbar-separator"></div>

                <div class="toolbar-group">
                  <button
                    class="icon-btn"
                    onclick="prevPage()"
                    id="prevBtn"
                    title="Previous Page"
                  >
                    ‚óÄ
                  </button>
                  <input
                    type="number"
                    class="page-input"
                    id="pageInput"
                    min="1"
                    onchange="goToPage()"
                  />
                  <span style="font-size: 12px"
                    >/ <span id="totalPages">0</span></span
                  >
                  <button
                    class="icon-btn"
                    onclick="nextPage()"
                    id="nextBtn"
                    title="Next Page"
                  >
                    ‚ñ∂
                  </button>
                </div>

                <div class="toolbar-separator"></div>

                <div class="toolbar-group">
                  <button
                    class="icon-btn"
                    onclick="toggleSidebar()"
                    id="sidebarToggle"
                    title="Toggle Sidebar"
                  >
                    ‚ò∞
                  </button>
                  <button
                    class="icon-btn"
                    onclick="rotatePages()"
                    title="Rotate"
                  >
                    ‚Üª
                  </button>
                </div>
              </div>

              <!-- Main Content -->
              <div class="main-content">
                <!-- Sidebar -->
                <div class="sidebar" id="sidebar">
                  <div class="sidebar-tabs">
                    <button
                      class="sidebar-tab active"
                      onclick="showSidebarTab('thumbnails')"
                    >
                      Thumbnails
                    </button>
                    <button
                      class="sidebar-tab"
                      onclick="showSidebarTab('search')"
                    >
                      Search
                    </button>
                  </div>

                  <div id="thumbnails-tab" class="sidebar-content">
                    <div id="thumbnailContainer"></div>
                  </div>

                  <div
                    id="search-tab"
                    class="sidebar-content"
                    style="display: none"
                  >
                    <div class="search-container">
                      <input
                        type="text"
                        class="search-input"
                        id="searchInput"
                        placeholder="Search in document..."
                        onkeyup="searchInPdf(event)"
                      />
                      <div class="search-results" id="searchResults"></div>
                    </div>
                  </div>
                </div>

                <!-- Viewer -->
                <div class="viewer-container">
                  <div class="viewer-content" id="viewerContent">
                    <div class="welcome">
                      <div>üìÑ</div>
                      <div>Load a PDF file to start reading</div>
                      <div style="margin-top: 16px">
                        <input
                          type="text"
                          id="welcomePathInput"
                          placeholder="Enter server file path (e.g., /docs/manual.pdf)"
                          style="
                            padding: 8px 12px;
                            border: 1px solid #ccc;
                            border-radius: 3px;
                            width: 300px;
                            margin-right: 8px;
                          "
                          value="<%= abhidhamma.pdfFilePath %>"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-span-full flex flex-1">
              <a
                href="javascript:window.history.back();"
                class="btn btn-primary w-full"
                ><%= __('back') %></a
              >
            </div>
          </div>
        </div>
      </div>
    </div>
    <% include ./partial/footer.ejs %>
  </body>
  <script src="/javascripts/jquery-3.7.1.min.js"></script>
  <script src="/javascripts/aos.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
  <script>
    let pdfDoc = null;
    let currentPage = 1;
    let totalPages = 0;
    let currentZoom = 1;
    let rotation = 0;
    let currentPdfFile = null;
    let currentPdfUrl = null;

    // Configure PDF.js worker
    pdfjsLib.GlobalWorkerOptions.workerSrc =
      "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js";

    // File input handler
    // document.getElementById("fileInput").addEventListener("change", handleFile);

    // Load PDF from server path
    async function loadFromPath() {
      const filePath = document.getElementById("filePathInput").value.trim();
      if (!filePath) {
        alert("Please enter a file path");
        return;
      }
      await loadPdfFromUrl(filePath);
    }

    async function loadFromWelcomePath() {
      const filePath = document.getElementById("welcomePathInput").value.trim();
      if (!filePath) {
        alert("Please enter a file path");
        return;
      }
      await loadPdfFromUrl(filePath);
    }

    async function loadPdfFromUrl(url) {
      showLoading();
      currentPdfUrl = url;
      currentPdfFile = null;

      try {
        // Load PDF from URL
        const loadingTask = pdfjsLib.getDocument({
          url: url,
          httpHeaders: {
            Accept: "application/pdf",
          },
        });

        pdfDoc = await loadingTask.promise;
        totalPages = pdfDoc.numPages;
        currentPage = 1;

        document.getElementById("totalPages").textContent = totalPages;
        document.getElementById("pageInput").value = currentPage;
        document.getElementById("pageInput").max = totalPages;

        updateNavigationButtons();
        await renderPage(currentPage);
        await generateThumbnails();
      } catch (error) {
        console.error("Error loading PDF from URL:", error);
        let errorMessage = "Failed to load PDF from the specified path.";

        if (error.name === "MissingPDFException") {
          errorMessage = "PDF file not found at the specified path.";
        } else if (error.name === "InvalidPDFException") {
          errorMessage = "The file is not a valid PDF or is corrupted.";
        } else if (error.name === "UnexpectedResponseException") {
          errorMessage =
            "Unable to access the file. Check the path and server permissions.";
        } else if (error.message.includes("CORS")) {
          errorMessage =
            "Cross-origin request blocked. The server may need to allow CORS for this domain.";
        } else if (
          error.message.includes("NetworkError") ||
          error.message.includes("fetch")
        ) {
          errorMessage =
            "Network error. Check the file path and server connectivity.";
        }

        showError(errorMessage);
      }
    }

    async function handleFile(event) {
      const file = event.target.files[0];
      if (!file || file.type !== "application/pdf") {
        showError("Please select a valid PDF file.");
        return;
      }

      currentPdfFile = file;
      showLoading();

      try {
        const arrayBuffer = await file.arrayBuffer();
        pdfDoc = await pdfjsLib.getDocument(arrayBuffer).promise;
        totalPages = pdfDoc.numPages;
        currentPage = 1;

        document.getElementById("totalPages").textContent = totalPages;
        document.getElementById("pageInput").value = currentPage;
        document.getElementById("pageInput").max = totalPages;

        updateNavigationButtons();
        await renderPage(currentPage);
        await generateThumbnails();
      } catch (error) {
        console.error("Error loading PDF:", error);
        showError(
          "Failed to load PDF file. The file may be corrupted or password protected."
        );
      }
    }

    function showLoading() {
      document.getElementById("viewerContent").innerHTML = `
                <div class="loading">Loading PDF...</div>
            `;
    }

    function showError(message) {
      document.getElementById("viewerContent").innerHTML = `
                <div class="error">
                    <div>‚ö†Ô∏è ${message}</div>
                    <button class="btnPdf" onclick="document.getElementById('fileInput').click()">Try Another File</button>
                </div>
            `;
    }

    async function renderPage(pageNum) {
      if (!pdfDoc) return;

      try {
        const page = await pdfDoc.getPage(pageNum);
        const viewport = page.getViewport({
          scale: currentZoom,
          rotation: rotation,
        });

        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        canvas.className = "pdf-page";

        const renderContext = {
          canvasContext: context,
          viewport: viewport,
        };

        await page.render(renderContext).promise;

        const container = document.createElement("div");
        container.className = "pdf-container";
        container.appendChild(canvas);

        document.getElementById("viewerContent").innerHTML = "";
        document.getElementById("viewerContent").appendChild(container);

        currentPage = pageNum;
        document.getElementById("pageInput").value = currentPage;
        updateNavigationButtons();
        highlightActiveThumbnail();
      } catch (error) {
        console.error("Error rendering page:", error);
        showError("Failed to render PDF page.");
      }
    }

    async function generateThumbnails() {
      if (!pdfDoc) return;

      const container = document.getElementById("thumbnailContainer");
      container.innerHTML = "";

      for (let i = 1; i <= totalPages; i++) {
        try {
          const page = await pdfDoc.getPage(i);
          const viewport = page.getViewport({ scale: 0.2 });

          const canvas = document.createElement("canvas");
          const context = canvas.getContext("2d");
          canvas.height = viewport.height;
          canvas.width = viewport.width;

          await page.render({
            canvasContext: context,
            viewport: viewport,
          }).promise;

          const thumbnailDiv = document.createElement("div");
          thumbnailDiv.className = "thumbnail";
          thumbnailDiv.onclick = () => goToPageNumber(i);

          const label = document.createElement("div");
          label.className = "thumbnail-label";
          label.textContent = `Page ${i}`;

          thumbnailDiv.appendChild(canvas);
          thumbnailDiv.appendChild(label);
          container.appendChild(thumbnailDiv);
        } catch (error) {
          console.error(`Error generating thumbnail for page ${i}:`, error);
        }
      }

      highlightActiveThumbnail();
    }

    function highlightActiveThumbnail() {
      const thumbnails = document.querySelectorAll(".thumbnail");
      thumbnails.forEach((thumb, index) => {
        thumb.classList.toggle("active", index + 1 === currentPage);
      });
    }

    function updateNavigationButtons() {
      document.getElementById("prevBtn").disabled = currentPage <= 1;
      document.getElementById("nextBtn").disabled = currentPage >= totalPages;
    }

    function prevPage() {
      if (currentPage > 1) {
        renderPage(currentPage - 1);
      }
    }

    function nextPage() {
      if (currentPage < totalPages) {
        renderPage(currentPage + 1);
      }
    }

    function goToPage() {
      const pageInput = document.getElementById("pageInput");
      const pageNum = parseInt(pageInput.value);
      goToPageNumber(pageNum);
    }

    function goToPageNumber(pageNum) {
      if (pageNum >= 1 && pageNum <= totalPages) {
        renderPage(pageNum);
      }
    }

    function zoomIn() {
      if (currentZoom < 3) {
        currentZoom += 0.25;
        document.getElementById("zoomSelect").value = currentZoom;
        renderPage(currentPage);
      }
    }

    function zoomOut() {
      if (currentZoom > 0.25) {
        currentZoom -= 0.25;
        document.getElementById("zoomSelect").value = currentZoom;
        renderPage(currentPage);
      }
    }

    function setZoom() {
      const zoomSelect = document.getElementById("zoomSelect");
      const zoomValue = zoomSelect.value;

      if (zoomValue === "fit-width" || zoomValue === "fit-page") {
        // For simplicity, we'll set these to reasonable zoom levels
        currentZoom = zoomValue === "fit-width" ? 1.2 : 1;
      } else {
        currentZoom = parseFloat(zoomValue);
      }

      renderPage(currentPage);
    }

    function rotatePages() {
      rotation = (rotation + 90) % 360;
      renderPage(currentPage);
      generateThumbnails();
    }

    function toggleSidebar() {
      const sidebar = document.getElementById("sidebar");
      sidebar.classList.toggle("collapsed");
    }

    function showSidebarTab(tabName) {
      // Update tab buttons
      document.querySelectorAll(".sidebar-tab").forEach((tab) => {
        tab.classList.remove("active");
      });
      event.target.classList.add("active");

      // Show/hide tab content
      document.getElementById("thumbnails-tab").style.display =
        tabName === "thumbnails" ? "block" : "none";
      document.getElementById("search-tab").style.display =
        tabName === "search" ? "block" : "none";
    }

    async function searchInPdf(event) {
      const query = event.target.value.trim();
      const resultsContainer = document.getElementById("searchResults");

      if (!query || !pdfDoc) {
        resultsContainer.innerHTML = "";
        return;
      }

      resultsContainer.innerHTML =
        '<div style="padding: 8px; color: #666;">Searching...</div>';

      try {
        const results = [];

        for (let i = 1; i <= totalPages; i++) {
          const page = await pdfDoc.getPage(i);
          const textContent = await page.getTextContent();
          const text = textContent.items.map((item) => item.str).join(" ");

          const regex = new RegExp(query, "gi");
          const matches = text.match(regex);

          if (matches) {
            results.push({
              page: i,
              matches: matches.length,
              context: text.substring(0, 100) + "...",
            });
          }
        }

        if (results.length > 0) {
          resultsContainer.innerHTML = results
            .map(
              (result) => `
                        <div class="search-result" onclick="goToPageNumber(${
                          result.page
                        })">
                            <strong>Page ${result.page}</strong> (${
                result.matches
              } match${result.matches > 1 ? "es" : ""})
                            <div style="color: #666; font-size: 10px;">${
                              result.context
                            }</div>
                        </div>
                    `
            )
            .join("");
        } else {
          resultsContainer.innerHTML =
            '<div style="padding: 8px; color: #666;">No results found</div>';
        }
      } catch (error) {
        console.error("Search error:", error);
        resultsContainer.innerHTML =
          '<div style="padding: 8px; color: #d32f2f;">Search failed</div>';
      }
    }

    function printPdf() {
      if (currentPdfFile) {
        const url = URL.createObjectURL(currentPdfFile);
        const printWindow = window.open(url);
        printWindow.onload = () => {
          printWindow.print();
          URL.revokeObjectURL(url);
        };
      } else {
        alert("No PDF file loaded");
      }
    }

    function downloadPdf() {
      if (currentPdfFile) {
        const url = URL.createObjectURL(currentPdfFile);
        const a = document.createElement("a");
        a.href = url;
        a.download = currentPdfFile.name;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } else if (currentPdfUrl) {
        // For server files, open in new tab for download
        const a = document.createElement("a");
        a.href = currentPdfUrl;
        a.download = "<%= abhidhamma.title %>.pdf";
        a.target = "_blank";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      } else {
        alert("No PDF file loaded");
      }
    }

    // Keyboard shortcuts
    document.addEventListener("keydown", function (e) {
      if (!pdfDoc) return;

      switch (e.key) {
        case "ArrowLeft":
        case "ArrowUp":
          if (!e.target.matches("input, select")) {
            e.preventDefault();
            prevPage();
          }
          break;
        case "ArrowRight":
        case "ArrowDown":
          if (!e.target.matches("input, select")) {
            e.preventDefault();
            nextPage();
          }
          break;
        case "+":
        case "=":
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            zoomIn();
          }
          break;
        case "-":
          if (e.ctrlKey || e.metaKey) {
            e.preventDefault();
            zoomOut();
          }
          break;
      }
    });
  </script>
  <script>
    $(async function () {
      await loadFromWelcomePath();
    });
  </script>
</html>
